from django.test import TestCase
from .figures import Figures
from .figures import Figures
from .figuredefinition import (
    Blau, Rot, Bordeaux, Orange, Dunkelgruen, Dunkelviolet, Violet,
    Gruen, Hellgruen, Gelb, Hellblau, Magenta
)
from .figure import Figure

class FigureTests(TestCase):

    def setUp(self):
        x1 = 3
        y1 = 1
        figuremanagement = Figures()
        self.figure = Figure(Bordeaux, x1, y1, 0, 0, figuremanagement)
        self.assertEqual(self.figure.x, x1)
        self.assertEqual(self.figure.y, y1)

    def test_Basics(self):
        figuremanagement = Figures()
        figure = Figure(Orange, 3, 1, 0, 0, figuremanagement)
        self.assertEqual(figure.x, 3)
        self.assertEqual(figure.y, 1)
        self.assertEqual(figure.rotX, 0)
        self.assertEqual(figure.rotZ, 0)
        figure = Figure(Rot, 0, 1, 180, 60, figuremanagement)
        self.assertEqual(figure.x, 0)
        self.assertEqual(figure.y, 1)
        self.assertEqual(figure.rotX, 180)
        self.assertEqual(figure.rotZ, 60)

    def test_reverseAngleList(self):
        figuremanagement = Figures()
        figure = Figure(Bordeaux, 3, 1, 0, 0, figuremanagement)
        self.assertEqual(figure.reverseAngleList([0]), [60, 120, 180, 240, 300])
        self.assertEqual(figure.reverseAngleList([0, 120]), [60, 180, 240, 300])
        self.assertEqual(figure.reverseAngleList([0, 240, 300]), [60, 120, 180])
        self.assertEqual(figure.reverseAngleList([60, 120, 180, 240, 300]), [0])

    def test_openAngles(self):
        figuremanagement = Figures()
        figure1 = Figure(Bordeaux, 2, 2, 0, 0, figuremanagement)
        self.assertEqual(figure1.openAngles("Element1"), [0, 60, 120, 180, 300])
        self.assertEqual(figure1.openAngles("Element2"), [0])
        self.assertEqual(figure1.openAngles("Element3"), [60, 120, 180, 240, 300])
        figure1 = Figure(Magenta, 4, 2, 0, 0, figuremanagement)
        self.assertEqual(figure1.openAngles("Element1"), [0, 60, 180, 240, 300])
        self.assertEqual(figure1.openAngles("Element2"), [])
        self.assertEqual(figure1.openAngles("Element3"), [300])
        figure1 = Figure(Violet, 0, 1, 0, 0, figuremanagement)
        self.assertEqual(figure1.openAngles("Element1"), [0, 60, 120, 240, 300])
        self.assertEqual(figure1.openAngles("Element2"), [240, 300])
        self.assertEqual(figure1.openAngles("Element3"), [60, 120, 180, 240, 300])
        figure1 = Figure(Gelb, 3, 2, 0, 0, figuremanagement)
        self.assertEqual(figure1.openAngles("Element1"), [0])
        self.assertEqual(figure1.openAngles("Element2"), [])
        self.assertEqual(figure1.openAngles("Element3"), [300])

    def test_fits_for_Develop_method(self):
        figuremanagement = Figures()
        f1 = Figure(Bordeaux, 3, 1, 0, 0, figuremanagement)
        self.assertEqual(f1.fits(), True)
        figuremanagement.board.closeAnglesInBoard(5, 1, 0)
        self.assertEqual(f1.fits(), True)
        figuremanagement.board.closeAnglesInBoard(3, 1, 0)
        self.assertEqual(f1.fits(), True)
        figuremanagement.board.closeAnglesInBoard(3, 1, 60)
        self.assertFalse(f1.fits())
        figuremanagement.board.openAnglesInBoard(3, 1, 60)
        self.assertEqual(f1.fits(), True)
        figuremanagement.board.closeAnglesInBoard(3, 1, 180)
        self.assertFalse(f1.fits())

    def test_fits_FigureManagement_is_occupied(self):
        figuremanagement = Figures()
        f1 = Figure(Gelb, 3, 2, 0, 0, figuremanagement)
        figuremanagement.board.closeAnglesInBoard(3, 1, 0)
        figuremanagement.board.closeAnglesInBoard(3, 3, 300)
        self.assertTrue(f1.fits())
        figuremanagement.board.closeAnglesInBoard(3, 3, 240)
        self.assertFalse(f1.fits())
        figuremanagement.board.openAnglesInBoard(3, 3, 240)
        self.assertTrue(f1.fits())
        figuremanagement.board.closeAnglesInBoard(3, 2, 60)
        self.assertFalse(f1.fits())
        figuremanagement.board.openAnglesInBoard(3, 2, 60)
        self.assertTrue(f1.fits())
        figuremanagement.board.closeAnglesInBoard(3, 1, 60)
        figuremanagement.board.closeAnglesInBoard(3, 1, 180)
        self.assertFalse(f1.fits())


    def test_probe(self):
        figuremanagement = Figures()
        figure = Figure(Dunkelviolet, 2, 2, 0, 0, figuremanagement)
        self.assertEqual(figure.probe(0), (3, 2))
        self.assertEqual(figure.probe(60), (2, 1))
        self.assertEqual(figure.probe(120), (1, 1))
        self.assertEqual(figure.probe(180), (1, 2))
        self.assertEqual(figure.probe(240), (1, 3)) 
        self.assertEqual(figure.probe(300), (2, 3)) 
        figure = Figure(Hellgruen, 1, 3, 0, 0, figuremanagement)
        self.assertEqual(figure.probe(0), (2, 3))
        self.assertEqual(figure.probe(60), (2, 2))
        self.assertEqual(figure.probe(120), (1, 2))
        self.assertEqual(figure.probe(180), (0, 3))
        self.assertEqual(figure.probe(240), (1, 4)) 
        self.assertEqual(figure.probe(300), (2, 4))
        figure = Figure(Gruen, 0, 0, 0, 0, figuremanagement)
        self.assertEqual(figure.probe(300), (0, 1))

    def test_probe_RotatedFigure(self):
        figuremanagement = Figures()
        figure = Figure(Magenta, 5, 1, 0, 300, figuremanagement)
        self.assertEqual(figure.probe(0), (6, 1))
        self.assertEqual(figure.probe(60), (6, 0))
        self.assertEqual(figure.probe(120), (5, 0))
        self.assertEqual(figure.probe(180), (4, 1))
        self.assertEqual(figure.probe(240), (5, 2)) 
        self.assertEqual(figure.probe(300), (6, 2))    

    def test_listOfRequiredOpens(self):
        figuremanagement = Figures()
        figure = Figure(Dunkelviolet, 2, 2, 0, 0, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 2, 'y': 1, 'a': [240], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 2, 'y': 2, 'a': [0, 60, 120, 180, 240, 300], 't': 'O'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 1, 'y': 2, 'a': [0, 60, 120, 180, 240], 't': 'C'})
        figure = Figure(Gruen, 0, 0, 0, 0, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 1, 'y': 0, 'a': [60, 120, 180, 240, 300], 't': 'C'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 0, 'y': 0, 'a': [0, 300], 't': 'Y'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 0, 'y': 1, 'a': [120], 't': 'X'})
        figure = Figure(Violet, 4, 3, 0, 0, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 5, 'y': 3, 'a': [180], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 4, 'y': 3, 'a': [0, 60, 120, 180], 't': 'C'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 3, 'y': 3, 'a': [0], 't': 'X'})

    def test_listOfRequiredOpens_Rotated_Z(self):
        figuremanagement = Figures()
        figure = Figure(Violet, 4, 3, 0, 180, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 3, 'y': 3, 'a': [0], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 4, 'y': 3, 'a': [0, 180, 240, 300], 't': 'C'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 5, 'y': 3, 'a': [180], 't': 'X'})
        figure = Figure(Hellblau, 3, 2, 0, 120, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 3, 'y': 1, 'a': [240], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 3, 'y': 2, 'a': [0, 60, 120, 180, 240, 300], 't': 'O'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 3, 'y': 3, 'a': [60, 120, 180, 240, 300], 't': 'C'})
        figure = Figure(Rot, 4, 2, 0, -60, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 4, 'y': 1, 'a': [240], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 4, 'y': 2, 'a': [0, 60, 120, 180, 240], 't': 'C'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 3, 'y': 1, 'a': [0, 60, 120, 180, 300], 't': 'C'})
        figure = Figure(Magenta, 5, 1, 0, 300, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 5, 'y': 2, 'a': [60], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 5, 'y': 1, 'a': [0, 60, 120, 180, 240, 300], 't': 'O'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 5, 'y': 0, 'a': [0, 60, 120, 180, 300], 't': 'C'})

    def test_listOfRequiredOpens_Rotated_X(self):
        figuremanagement = Figures()
        figure = Figure(Dunkelviolet, 2, 2, 180, 0, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 2, 'y': 3, 'a': [120], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 2, 'y': 2, 'a': [0, 60, 120, 180, 240, 300], 't': 'O'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 1, 'y': 2, 'a': [0, 120, 180, 240, 300], 't': 'C'})
        figure = Figure(Rot, 1, 0, 180, 0, figuremanagement)
        self.assertEqual(figure.listOfRequiredOpens()[0], {'x': 0, 'y': 1, 'a': [60], 't': 'X'})
        self.assertEqual(figure.listOfRequiredOpens()[1], {'x': 1, 'y': 0, 'a': [60, 120, 180, 240, 300], 't': 'C'})
        self.assertEqual(figure.listOfRequiredOpens()[2], {'x': 0, 'y': 0, 'a': [0, 120, 180, 240, 300], 't': 'C'})
        violet = Figure(Violet, 1, 1, 0, 0, figuremanagement)        
        self.assertEqual(violet.listOfRequiredOpens()[0], {'x': 2, 'y': 1, 'a': [180], 't': 'X'})
        self.assertEqual(violet.listOfRequiredOpens()[1], {'x': 1, 'y': 1, 'a': [0, 60, 120, 180], 't': 'C'})
        self.assertEqual(violet.listOfRequiredOpens()[2], {'x': 0, 'y': 1, 'a': [0], 't': 'X'})
        gruen = Figure(Gruen, 1, 2, 180, 240, figuremanagement)
        self.assertEqual(gruen.listOfRequiredOpens()[0], {'x': 0, 'y': 3, 'a': [0, 60, 120, 180, 300], 't': 'C'})
        self.assertEqual(gruen.listOfRequiredOpens()[1], {'x': 1, 'y': 2, 'a': [240, 300], 't': 'Y'})
        self.assertEqual(gruen.listOfRequiredOpens()[2], {'x': 1, 'y': 3, 'a': [120], 't': 'X'})
        gruen = Figure(Gruen, 1, 1, 180, 240, figuremanagement)
        self.assertEqual(gruen.listOfRequiredOpens()[0], {'x': 1, 'y': 2, 'a': [0, 60, 120, 180, 300], 't': 'C'})
        self.assertEqual(gruen.listOfRequiredOpens()[1], {'x': 1, 'y': 1, 'a': [240, 300], 't': 'Y'})
        self.assertEqual(gruen.listOfRequiredOpens()[2], {'x': 2, 'y': 2, 'a': [120], 't': 'X'})

    def test_places(self):
        figuremanagement = Figures()
        figure = Figure(Gruen, 0, 0, 0, 0, figuremanagement)
        figure.place()
        self.assertEqual(figuremanagement.board.Field()[0][0]['a'], [60, 120, 180, 240])
        self.assertEqual(figuremanagement.board.Field()[1][0]['a'], [0])
        self.assertEqual(figuremanagement.board.Field()[0][1]['a'], [0, 60, 180, 240, 300])
        figure = Figure(Orange, 5, 3, 0, 0, figuremanagement)
        figure.place()
        self.assertEqual(figuremanagement.board.Field()[5][3]['a'], [0])
        self.assertEqual(figuremanagement.board.Field()[5][2]['a'], [0, 60, 120, 180, 240])
        self.assertEqual(figuremanagement.board.Field()[4][3]['a'], [60, 120, 180, 240, 300])
        figure.unPlace()
        self.assertEqual(set(figuremanagement.board.Field()[5][3]['a']), set([0, 60, 120, 180, 240, 300]))
        self.assertEqual(set(figuremanagement.board.Field()[5][2]['a']), set([0, 60, 120, 180, 240, 300]))
        self.assertEqual(set(figuremanagement.board.Field()[4][3]['a']), set([0, 60, 120, 180, 240, 300]))
        figure = Figure(Magenta, 5, 1, 0, 300, figuremanagement)
        figure.place()
        self.assertEqual(figuremanagement.board.Field()[5][0]['a'], [240])
        self.assertEqual(figuremanagement.board.Field()[5][1]['a'], [])
        self.assertEqual(figuremanagement.board.Field()[5][2]['a'], [0, 120, 180, 240, 300])
        figure.unPlace()
        self.assertEqual(set(figuremanagement.board.Field()[5][0]['a']), set([0, 60, 120, 180, 240, 300]))
        self.assertEqual(set(figuremanagement.board.Field()[5][1]['a']), set([0, 60, 120, 180, 240, 300]))
        self.assertEqual(set(figuremanagement.board.Field()[5][2]['a']), set([0, 60, 120, 180, 240, 300]))

    def test_places_type(self):
        figuremanagement = Figures()
        figure = Figure(Gruen, 0, 0, 0, 0, figuremanagement)
        figure.place()
        self.assertEqual(figuremanagement.board.Field()[0][0]['a'], [60, 120, 180, 240])
        self.assertEqual(figuremanagement.board.Field()[1][0]['a'], [0])
        self.assertEqual(figuremanagement.board.Field()[0][1]['a'], [0, 60, 180, 240, 300])
        self.assertEqual(figuremanagement.board.Field()[0][0]['t'], 'Y')
        self.assertEqual(figuremanagement.board.Field()[1][0]['t'], 'C')
        self.assertEqual(figuremanagement.board.Field()[0][1]['t'], 'X')
        figure.unPlace()
        self.assertEqual(figuremanagement.board.Field()[0][0]['t'], '')
        self.assertEqual(figuremanagement.board.Field()[1][0]['t'], '')
        self.assertEqual(figuremanagement.board.Field()[0][1]['t'], '')

    def test_place_and_fit(self):
        figuremanagement = Figures()
        f1 = Figure(Bordeaux, 3, 2, 0, 0, figuremanagement)
        f2 = Figure(Dunkelgruen, 4, 1, 0, 0, figuremanagement)
        f3 = Figure(Blau, 0, 0, 0, 0, figuremanagement)
        f4 = Figure(Gelb, 4, 1, 0, 0, figuremanagement)
        self.assertTrue(f1.fits())
        self.assertTrue(f2.fits())
        f1.place() 
        self.assertFalse(f1.fits())
        self.assertTrue(f2.fits())
        f3.place() 
        self.assertFalse(f1.fits())
        self.assertTrue(f2.fits())
        f4.place() 
        self.assertFalse(f1.fits())
        self.assertFalse(f2.fits())
        f4.unPlace() 
        self.assertFalse(f1.fits())
        self.assertTrue(f2.fits())

    def test_fit_in_FigureManagement(self):
        figuremanagement = Figures()
        f1 = Figure(Rot, 5, 3, 0, 0, figuremanagement)
        self.assertTrue(f1.fits())
        f1 = Figure(Rot, 5, 1, 0, 0, figuremanagement)
        self.assertTrue(f1.fits())
        f1 = Figure(Rot, 3, 0, 0, 0, figuremanagement)
        self.assertFalse(f1.fits())
        f1 = Figure(Rot, 1, 1, 0, 0, figuremanagement)
        self.assertTrue(f1.fits())
        f1 = Figure(Rot, 0, 1, 0, 0, figuremanagement)
        self.assertFalse(f1.fits())
        f1 = Figure(Rot, 2, 2, 0, 0, figuremanagement)
        self.assertTrue(f1.fits())
        f1 = Figure(Rot, -2, 15, 0, 0, figuremanagement)
        self.assertFalse(f1.fits())
        
    def test_place_and_fit_Rotated(self):
        figuremanagement = Figures()
        violet = Figure(Violet, 4, 3, 0, 180, figuremanagement)        
        hellblau = Figure(Hellblau, 3, 2, 0, 120, figuremanagement)
        rot = Figure(Rot, 4, 2, 0, 300, figuremanagement)
        gelb = Figure(Gelb, 4, 2, 0, 0, figuremanagement)

        self.assertTrue(violet.fits())
        self.assertTrue(hellblau.fits())
        violet.place() 
        self.assertFalse(violet.fits())
        self.assertTrue(hellblau.fits())
        rot.place() 
        self.assertTrue(hellblau.fits())
        rot.unPlace()
        violet.unPlace() 

        gelb.place()
        self.assertFalse(violet.fits())
        self.assertTrue(hellblau.fits())
        self.assertFalse(rot.fits()) 
        
    def test_place_and_fit_Rotated_Flipped(self):
        figuremanagement = Figures()
        violet = Figure(Violet, 1, 1, 0, 0, figuremanagement)        
        gruen = Figure(Gruen, 1, 1, 180, 240, figuremanagement)
        magenta = Figure(Magenta, 3, 2, 180, 0, figuremanagement)
        rot = Figure(Rot, 2, 1, 180, 180, figuremanagement)

        violet.place()
        self.assertTrue(gruen.fits())
        self.assertTrue(rot.fits())
        self.assertTrue(magenta.fits())
        rot.place()
        self.assertTrue(magenta.fits())
        self.assertTrue(gruen.fits())
        magenta.place()
        self.assertFalse(gruen.fits())  

    def test_str_response(self):
        figuremanagement = Figures()
        violet = Figure(Violet, 1, 1, 0, 0, figuremanagement)        
        gruen = Figure(Gruen, 1, 1, 180, 240, figuremanagement)
        magenta = Figure(Magenta, 3, 2, 180, 0, figuremanagement)
        rot = Figure(Rot, 2, 1, 180, 180, figuremanagement)
        self.assertTrue(str(gruen), "Gruen - x:1, y:1, rx:180, rz:240, Fits: True")
        violet.place()
        rot.place()
        magenta.place()
        self.assertTrue(str(violet), "Violet - x:1, y:1, rx:0, rz:0, Fits: True")
        self.assertTrue(str(gruen), "Gruen - x:1, y:1, rx:180, rz:240, Fits: False")
        self.assertTrue(str(magenta), "Magenta - x:3, y:2, rx:180, rz:0, Fits: True")
        self.assertTrue(str(rot), "Rot - x:2, y:1, rx:180, rz:180, Fits: True")

    def test_checks_nach_Beobachtungen(self):
        figuremanagement = Figures()
        rot = Figure(Rot, 0, 1, 0, -60, figuremanagement)
        self.assertEqual(rot.fits(), True)
        rot = Figure(Rot, 0, 1, 0, 0, figuremanagement)
        self.assertEqual(rot.fits(), False)



    def test_fits_mit_typcheck(self):
        figuremanagement = Figures()
        rot = Figure(Rot, 0, 0, 0, 180, figuremanagement)
        self.assertEqual(rot.fits(), True)
        rot.place()
        violet = Figure(Violet, 1, 1, 0, 0, figuremanagement)
        self.assertEqual(violet.fits(), False)


